Classes:
    São todos os arquivos que contém um código Java. Por ser uma linguagem orientada a objetos, o Java necessita que todos os seus códigos estejam dentro de uma classe.

Package:
    Um Package é um conjunto de classes relacionadas. Podemos criar um Package que irá abrigar todas as classes de Entidades, um que irá abrigar todas as classes de Repositories, etc.

Módulo:
    Um Módulo é um conjunto de pacotes relacionados. Podemos juntar Packages que, juntos, representam um módulo específico.

Static:
    A palavra reservada Static significa que aquele método pode ser acessado sem depender de uma instância da classe. É muito comum ver o uso de Static em classes de utilidade, como a classe Math. Quando necessitamos da execução de um código que depende apenas dos parâmetros de entrada e não da construção do objeto, faz mais sentido realizar a chamada de um método static, já que não seria tão usual instanciar uma calculadora para realizar uma operação de raiz quadrada, por exemplo.

toString:
    É um método herdado da classe Object que pode ser sobrescrito em qualquer classe. O Objetivo é criar uma representação do objeto em forma de String para fins de, principalmente, desenvolvimento.

Sobrecarga:
    É quando criamos mais de um constructor com o mesmo nome, os diferenciando apenas pelos argumentos recebidos. Quando o Java identifica os argumentos recebidos durante a instância do objeto, o constructor correto é acionado.

Encapsulamento:
    O conceito de Encapsulamento é proteger o acesso aos atributos da classe para que nenhum objeto seja alterado sem as devidas permições. Alterando o modificador de acesso de public para private em um argumento, o objeto passa ficar protegido contra modificações diretas. Para manueá-lo, devemos utilizar o padrão getters and setters, onde chamamos métodos públicos que pertencem a classe do objeto. Esses métodos possuem a permissão de alterar os atributos que estão definidos como private.

Tipo Referência e Tipo Valor:
    Variáveis do tipo classe são tratadas como variáveis do tipo referência. Isso significa que seu conteúdo é, na verdade, um endereço para uma posição na memória Heap. Sendo assim, a variável está localizada em um local da memória Stack, mas o objeto (que é o seu conteúdo) está localizado em um local na memória Heap. Portanto, o conteúdo que está dentro do endereço utilizado na memória Stack é um endereço que leva até o objeto na memória Heap. Por isso, variáveis do tipo Classe são chamadas de tipo referência... Elas armazenam uma referência para uma posição de memória.
    Variáveis do tipo primitivo são tratadas como variáveis do tipo valor. Elas são criadas na memória stack e armazenam o próprio valor ali. Não há a necessidade de armazenar um endereço que leve para uma outra posição como o valor real.

List:
    List é uma interface utilizada para criar listas no Java. Por ser uma interface, ela não pode ser instânciada diretamente e, por isso, é necessário que uma classe a implemente. As listas são homogêneas, ordenadas, iniciadas vazias, alocadas por demanda e referenciam seu elementos através de nós.
    Exemplos de classes que implementam a interface List: ArrayList e LinkedList.
    Instânciando uma lista:

        List<String> nomeDaLista = new ArrayList<>();

    List é o tipo, <String> indica o tipo dos elementos que estarão dentro da lista e ArrayList é a Classe da qual estamos instanciando a lista
    Métodos para usar com list:

        add - adiciona um elemento na lista
        size - informa o tamanho da lista
        remove - remove um elemento da lista
        removeIf - remove um ou mais elementos através de um predicado (um predicado é uma expressão lambda)
        indexOf - retorna a posição da lista que contenha um elemento informado. Retorna -1 caso não encontre nenhum elemento
        get - pega o elemento ao informar o index dele

        Para aplicar filtros, é um pouco mais trabalhoso. O tipo list não é compatível com expressões lambdas. Portanto, durante o processo, devemos converter a lista para um tipo stream, realizar o filtro com a expressão lambda e depois converter novamente para um tipo List. Tudo isso deve ser atribuido em uma nova List:
            List<String> resultado = lista.stream().filter(x -> x.charAt(0) == "A").collect(Collectors.toList());

        Para recuperar o primeiro elemento de uma lista que atenda um predicado, devemos utilizar o método findFirst. Mas ele também não é compatível com o tipo List, por isso, devemos realizar as devidas conversões. No código abaixo, iremos converter a lista para stream, utilizar o filtro para aplicar a expressão lambda, chamar o método findFirst e passar o método orElse que será chamado caso o findFirst não encontre nada:
            String name = lista.stream().filter(x -> x.charAt(0) == "A").findFirst().orElse(null);

Data:
    O Java possui operações importantes com data. É possível declarar datas locais e globais, converter textos para datas e datas para textos, fazer operações entre datas, desconstruir datas para obter hora, dia, mes e ano etc.
    As operações para instanciar datas são:

        LocalDate d01 = LocalDate.now(); // instancia a hora atual, sem horas

        LocalDateTime d02 = LocalDateTime.now(); // instancia a hora atual, com horas

        Instant d03 = Instant.now(); // instancia a hora atual, mas no fuso horário de greenwich (Londres)

        LocalDate d04 = Localdate.parse("2024-03-05"); // Converte uma string no formato ISO para um objeto do tipo LocalDate

        LocalDataTime d05 = LocalDateTime.parse("2024-03-05T01:30:32") // Converte uma string no formato ISO para um objeto do tipo LocalDateTime

        Instant d06 = Instant.parse("2024-03-5T01:30:32Z"); // Converte uma Strint no formato ISO para um objeto do tipo Instant